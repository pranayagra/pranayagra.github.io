{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./Utils\";\nimport { deepExtend, itemFromArray } from \"../../Utils/Utils\";\nimport { getDistance, getDistances } from \"../../Utils/NumberUtils\";\nimport { Constants } from \"../../Core/Utils/Constants\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nexport var PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container) {\n    _classCallCheck(this, PolygonMaskInstance);\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n  _createClass(PolygonMaskInstance, [{\n    key: \"initAsync\",\n    value: function () {\n      var _initAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        var polygonMaskOptions;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n              polygonMaskOptions = this.options;\n              this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n              if (!polygonMaskOptions.enable) {\n                _context.next = 6;\n                break;\n              }\n              _context.next = 6;\n              return this.initRawData();\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initAsync(_x) {\n        return _initAsync.apply(this, arguments);\n      }\n      return initAsync;\n    }()\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n      var container = this.container,\n        options = this.options;\n      if (!(options.enable && options.type !== \"none\")) {\n        return;\n      }\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n      this.redrawTimeout = window.setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this.initRawData(true);\n            case 2:\n              _context2.next = 4;\n              return container.particles.redraw();\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      })), 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n      if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n        this.drawPoints();\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position) {\n      var _a, _b;\n      var options = this.options;\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n      return deepExtend({}, position ? position : this.randomPoint());\n    }\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle, delta, direction) {\n      return this.polygonBounce(particle, delta, direction);\n    }\n  }, {\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var options = this.options,\n        polygonDraw = options.draw;\n      if (!options.enable || !polygonDraw.enable) {\n        return;\n      }\n      var rawData = this.raw;\n      var _iterator = _createForOfIteratorHelper(this.paths),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var path = _step.value;\n          var path2d = path.path2d,\n            path2dSupported = this.path2DSupported;\n          if (!context) {\n            continue;\n          }\n          if (path2dSupported && path2d && this.offset) {\n            drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            drawPolygonMask(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle, _delta, direction) {\n      var options = this.options;\n      if (!this.raw || !options.enable || direction !== \"top\") {\n        return false;\n      }\n      if (options.type === \"inside\" || options.type === \"outside\") {\n        var closest, dx, dy;\n        var pos = particle.getPosition(),\n          radius = particle.getRadius();\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n          var pi = this.raw[i],\n            pj = this.raw[j];\n          closest = calcClosestPtOnSegment(pi, pj, pos);\n          var dist = getDistances(pos, closest);\n          var _ref2 = [dist.dx, dist.dy];\n          dx = _ref2[0];\n          dy = _ref2[1];\n          if (dist.distance < radius) {\n            segmentBounce(pi, pj, particle.velocity);\n            return true;\n          }\n        }\n        if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n          var factor = {\n            x: 1,\n            y: 1\n          };\n          if (particle.position.x >= closest.x) {\n            factor.x = -1;\n          }\n          if (particle.position.y >= closest.y) {\n            factor.y = -1;\n          }\n          particle.position.x = closest.x + radius * 2 * factor.x;\n          particle.position.y = closest.y + radius * 2 * factor.y;\n          particle.velocity.mult(-1);\n          return true;\n        }\n      } else if (options.type === \"inline\" && particle.initialPosition) {\n        var _dist = getDistance(particle.initialPosition, particle.getPosition());\n        if (_dist > this.polygonMaskMoveRadius) {\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n      var container = this.container,\n        options = this.options;\n      if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n        return true;\n      }\n      if (!this.raw) {\n        throw new Error(Constants.noPolygonFound);\n      }\n      var canvasSize = container.canvas.size,\n        x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width,\n        y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n      var inside = false;\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i],\n          pj = this.raw[j],\n          intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n      return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n    }\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n      var container = this.container,\n        options = this.options,\n        parser = new DOMParser(),\n        doc = parser.parseFromString(xml, \"image/svg+xml\"),\n        svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n      this.paths = [];\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n      var pxRatio = container.retina.pixelRatio,\n        scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return parsePaths(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function () {\n      var _downloadSvgPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(svgUrl, force) {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n              if (!(!url || this.paths !== undefined && !forceDownload)) {\n                _context3.next = 3;\n                break;\n              }\n              return _context3.abrupt(\"return\", this.raw);\n            case 3:\n              _context3.next = 5;\n              return fetch(url);\n            case 5:\n              req = _context3.sent;\n              if (req.ok) {\n                _context3.next = 8;\n                break;\n              }\n              throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n            case 8:\n              _context3.t0 = this;\n              _context3.next = 11;\n              return req.text();\n            case 11:\n              _context3.t1 = _context3.sent;\n              _context3.t2 = force;\n              return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function downloadSvgPath(_x2, _x3) {\n        return _downloadSvgPath.apply(this, arguments);\n      }\n      return downloadSvgPath;\n    }()\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n      var _iterator2 = _createForOfIteratorHelper(this.raw),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          this.container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this.container,\n        options = this.options;\n      var position;\n      if (options.type === \"inline\") {\n        switch (options.inline.arrangement) {\n          case \"random-point\":\n            position = this.getRandomPoint();\n            break;\n          case \"random-length\":\n            position = this.getRandomPointByLength();\n            break;\n          case \"equidistant\":\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n          case \"one-per-point\":\n          case \"per-point\":\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: Math.random() * container.canvas.size.width,\n          y: Math.random() * container.canvas.size.height\n        };\n      }\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Constants.noPolygonDataLoaded);\n      }\n      var coords = itemFromArray(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n      var options = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(Constants.noPolygonDataLoaded);\n      }\n      var path = itemFromArray(this.paths),\n        distance = Math.floor(Math.random() * path.length) + 1,\n        point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n      var options = this.container.actualOptions,\n        polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Constants.noPolygonDataLoaded);\n      var offset = 0,\n        point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n          return tot + path.length;\n        }, 0),\n        distance = totalLength / options.particles.number.value;\n      var _iterator3 = _createForOfIteratorHelper(this.paths),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var path = _step3.value;\n          var pathDistance = distance * index - offset;\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Constants.noPolygonDataLoaded);\n      }\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n      var _a, _b;\n      var options = this.options;\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var _iterator4 = _createForOfIteratorHelper(this.paths),\n        _step4;\n      try {\n        var _loop = function _loop() {\n          var path = _step4.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n          if (pathData) {\n            var path2d = new Path2D(pathData),\n              matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(),\n              finalPath = new Path2D(),\n              transform = matrix.scale(options.scale);\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n          path.path2d.closePath();\n        };\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _ret = _loop();\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"initRawData\",\n    value: function () {\n      var _initRawData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(force) {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              options = this.options;\n              if (!options.url) {\n                _context4.next = 7;\n                break;\n              }\n              _context4.next = 4;\n              return this.downloadSvgPath(options.url, force);\n            case 4:\n              this.raw = _context4.sent;\n              _context4.next = 8;\n              break;\n            case 7:\n              if (options.data) {\n                data = options.data;\n                if (typeof data !== \"string\") {\n                  path = data.path instanceof Array ? data.path.map(function (t) {\n                    return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                  }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                  namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                  svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                } else {\n                  svg = data;\n                }\n                this.raw = this.parseSvgPath(svg, force);\n              }\n            case 8:\n              this.createPath2D();\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function initRawData(_x4) {\n        return _initRawData.apply(this, arguments);\n      }\n      return initRawData;\n    }()\n  }]);\n  return PolygonMaskInstance;\n}();","map":{"version":3,"names":["calcClosestPtOnSegment","drawPolygonMask","drawPolygonMaskPath","parsePaths","segmentBounce","deepExtend","itemFromArray","getDistance","getDistances","Constants","PolygonMask","PolygonMaskInstance","container","_classCallCheck","dimension","height","width","path2DSupported","window","Path2D","options","polygonMaskMoveRadius","move","radius","retina","pixelRatio","_createClass","key","value","_initAsync","_asyncToGenerator","_regeneratorRuntime","mark","_callee","polygonMaskOptions","wrap","_callee$","_context","prev","next","load","polygon","enable","initRawData","stop","initAsync","_x","apply","arguments","resize","_this","type","redrawTimeout","clearTimeout","setTimeout","_callee2","_callee2$","_context2","particles","redraw","raw","paths","particlesInitialization","inline","arrangement","drawPoints","particlePosition","position","_a","_b","length","randomPoint","particleBounce","particle","delta","direction","polygonBounce","clickPositionValid","checkInsidePolygon","draw","context","polygonDraw","rawData","_iterator","_createForOfIteratorHelper","_step","s","n","done","path","path2d","path2dSupported","offset","stroke","err","e","f","_delta","closest","dx","dy","pos","getPosition","getRadius","i","j","pi","pj","dist","_ref2","distance","velocity","undefined","factor","x","y","mult","initialPosition","Error","noPolygonFound","canvasSize","canvas","size","Math","random","inside","intersect","parseSvgPath","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","_downloadSvgPath","_callee3","svgUrl","url","req","_callee3$","_context3","abrupt","fetch","sent","ok","t0","text","t1","t2","call","downloadSvgPath","_x2","_x3","_iterator2","_step2","addParticle","getRandomPoint","getRandomPointByLength","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","_iterator3","_step3","pathDistance","createPath2D","_this2","_iterator4","_step4","_loop","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","_ret","_initRawData","_callee4","data","namespaces","_callee4$","_context4","Array","map","t","concat","join","_x4"],"sources":["C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/tsparticles/esm/Plugins/PolygonMask/PolygonMaskInstance.js"],"sourcesContent":["import { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./Utils\";\nimport { deepExtend, itemFromArray } from \"../../Utils/Utils\";\nimport { getDistance, getDistances } from \"../../Utils/NumberUtils\";\nimport { Constants } from \"../../Core/Utils/Constants\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nexport class PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    resize() {\n        const container = this.container, options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            await container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return deepExtend({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options, polygonDraw = options.draw;\n        if (!options.enable || !polygonDraw.enable) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d, path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = calcClosestPtOnSegment(pi, pj, pos);\n                const dist = getDistances(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    segmentBounce(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container, options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size, x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i], pj = this.raw[j], intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container, options = this.options, parser = new DOMParser(), doc = parser.parseFromString(xml, \"image/svg+xml\"), svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio, scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return parsePaths(this.paths, scale, this.offset);\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container, options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const coords = itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const path = itemFromArray(this.paths), distance = Math.floor(Math.random() * path.length) + 1, point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions, polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Constants.noPolygonDataLoaded);\n        let offset = 0, point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0), distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData), matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(), finalPath = new Path2D(), transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}