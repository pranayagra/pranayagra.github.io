{"ast":null,"code":"import _classCallCheck from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nimport { getDistance, getRangeMax, getRangeValue } from \"../../Utils/NumberUtils\";\nexport var BaseMover = /*#__PURE__*/function () {\n  function BaseMover() {\n    _classCallCheck(this, BaseMover);\n  }\n\n  _createClass(BaseMover, [{\n    key: \"init\",\n    value: function init(particle) {\n      var _a;\n\n      var container = particle.container,\n          options = particle.options,\n          spinOptions = options.move.spin;\n\n      if (spinOptions.enable) {\n        var spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : {\n          x: 50,\n          y: 50\n        };\n        var spinCenter = {\n          x: spinPos.x / 100 * container.canvas.size.width,\n          y: spinPos.y / 100 * container.canvas.size.height\n        };\n        var pos = particle.getPosition();\n        var distance = getDistance(pos, spinCenter);\n        var spinAcceleration = getRangeValue(spinOptions.acceleration);\n        particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n        particle.spin = {\n          center: spinCenter,\n          direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n          angle: particle.velocity.angle,\n          radius: distance,\n          acceleration: particle.retina.spinAcceleration\n        };\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !particle.destroyed && particle.options.move.enable;\n    }\n  }, {\n    key: \"move\",\n    value: function move(particle, delta) {\n      var _a, _b, _c;\n\n      var _d, _e;\n\n      var particleOptions = particle.options,\n          moveOptions = particleOptions.move;\n\n      if (!moveOptions.enable) {\n        return;\n      }\n\n      var container = particle.container,\n          slowFactor = getProximitySpeedFactor(particle),\n          baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : _d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n          moveDrift = (_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : _e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n          maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n          sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n          speedFactor = sizeFactor * slowFactor * (delta.factor || 1),\n          diffFactor = 2,\n          moveSpeed = baseSpeed * speedFactor / diffFactor;\n      applyPath(particle, delta);\n      var gravityOptions = particle.gravity,\n          gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n\n      if (gravityOptions.enable && moveSpeed) {\n        particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n      }\n\n      if (moveDrift && moveSpeed) {\n        particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n      }\n\n      var decay = particle.moveDecay;\n\n      if (decay != 1) {\n        particle.velocity.multTo(decay);\n      }\n\n      var velocity = particle.velocity.mult(moveSpeed),\n          maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n\n      if (gravityOptions.enable && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n        velocity.y = gravityFactor * maxSpeed;\n\n        if (moveSpeed) {\n          particle.velocity.y = velocity.y / moveSpeed;\n        }\n      }\n\n      var zIndexOptions = particle.options.zIndex,\n          zVelocityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.velocityRate);\n\n      if (moveOptions.spin.enable) {\n        spin(particle, moveSpeed);\n      } else {\n        if (zVelocityFactor != 1) {\n          velocity.multTo(zVelocityFactor);\n        }\n\n        particle.position.addTo(velocity);\n\n        if (moveOptions.vibrate) {\n          particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n          particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n      }\n\n      applyDistance(particle);\n    }\n  }]);\n\n  return BaseMover;\n}();","map":{"version":3,"sources":["C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/tsparticles/esm/Movers/Base/BaseMover.js"],"names":["applyDistance","applyPath","getProximitySpeedFactor","spin","getDistance","getRangeMax","getRangeValue","BaseMover","particle","_a","container","options","spinOptions","move","enable","spinPos","position","x","y","spinCenter","canvas","size","width","height","pos","getPosition","distance","spinAcceleration","acceleration","retina","pixelRatio","center","direction","velocity","angle","radius","destroyed","delta","_b","_c","_d","_e","particleOptions","moveOptions","slowFactor","baseSpeed","moveSpeed","speed","reduceFactor","moveDrift","drift","maxSize","value","sizeFactor","getRadius","speedFactor","factor","diffFactor","gravityOptions","gravity","gravityFactor","inverse","decay","moveDecay","multTo","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","addTo","vibrate","Math","sin","cos"],"mappings":"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","sourcesContent":["import { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nimport { getDistance, getRangeMax, getRangeValue } from \"../../Utils/NumberUtils\";\nexport class BaseMover {\n    init(particle) {\n        var _a;\n        const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n        if (spinOptions.enable) {\n            const spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = particle.getPosition();\n            const distance = getDistance(pos, spinCenter);\n            const spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        var _a, _b, _c;\n        var _d, _e;\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, slowFactor = getProximitySpeedFactor(particle), baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : (_d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : (_e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, speedFactor = sizeFactor * slowFactor * (delta.factor || 1), diffFactor = 2, moveSpeed = (baseSpeed * speedFactor) / diffFactor;\n        applyPath(particle, delta);\n        const gravityOptions = particle.gravity, gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable && moveSpeed) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveDrift && moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        const decay = particle.moveDecay;\n        if (decay != 1) {\n            particle.velocity.multTo(decay);\n        }\n        const velocity = particle.velocity.mult(moveSpeed), maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n        if (gravityOptions.enable &&\n            maxSpeed > 0 &&\n            ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n            velocity.y = gravityFactor * maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}