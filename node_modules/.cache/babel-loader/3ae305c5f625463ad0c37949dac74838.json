{"ast":null,"code":"import _classCallCheck from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { isSsr } from \"../../Utils/Utils\";\nexport var ParallaxMover = /*#__PURE__*/function () {\n  function ParallaxMover() {\n    _classCallCheck(this, ParallaxMover);\n  }\n\n  _createClass(ParallaxMover, [{\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !isSsr() && !particle.destroyed && particle.container.actualOptions.interactivity.events.onHover.parallax.enable;\n    }\n  }, {\n    key: \"move\",\n    value: function move(particle) {\n      var container = particle.container,\n          options = container.actualOptions;\n\n      if (isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n        return;\n      }\n\n      var parallaxForce = options.interactivity.events.onHover.parallax.force,\n          mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      var canvasCenter = {\n        x: container.canvas.size.width / 2,\n        y: container.canvas.size.height / 2\n      },\n          parallaxSmooth = options.interactivity.events.onHover.parallax.smooth,\n          factor = particle.getRadius() / parallaxForce,\n          centerDistance = {\n        x: (mousePos.x - canvasCenter.x) * factor,\n        y: (mousePos.y - canvasCenter.y) * factor\n      };\n      particle.offset.x += (centerDistance.x - particle.offset.x) / parallaxSmooth;\n      particle.offset.y += (centerDistance.y - particle.offset.y) / parallaxSmooth;\n    }\n  }]);\n\n  return ParallaxMover;\n}();","map":{"version":3,"sources":["C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/tsparticles/esm/Movers/Parallax/ParallaxMover.js"],"names":["isSsr","ParallaxMover","particle","destroyed","container","actualOptions","interactivity","events","onHover","parallax","enable","options","parallaxForce","force","mousePos","mouse","position","canvasCenter","x","canvas","size","width","y","height","parallaxSmooth","smooth","factor","getRadius","centerDistance","offset"],"mappings":";;AAAA,SAASA,KAAT,QAAsB,mBAAtB;AACA,WAAaC,aAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WACI,gBAAO,CACN;AAFL;AAAA;AAAA,WAGI,mBAAUC,QAAV,EAAoB;AAChB,aAAQ,CAACF,KAAK,EAAN,IACJ,CAACE,QAAQ,CAACC,SADN,IAEJD,QAAQ,CAACE,SAAT,CAAmBC,aAAnB,CAAiCC,aAAjC,CAA+CC,MAA/C,CAAsDC,OAAtD,CAA8DC,QAA9D,CAAuEC,MAF3E;AAGH;AAPL;AAAA;AAAA,WAQI,cAAKR,QAAL,EAAe;AACX,UAAME,SAAS,GAAGF,QAAQ,CAACE,SAA3B;AAAA,UAAsCO,OAAO,GAAGP,SAAS,CAACC,aAA1D;;AACA,UAAIL,KAAK,MAAM,CAACW,OAAO,CAACL,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,QAArC,CAA8CC,MAA9D,EAAsE;AAClE;AACH;;AACD,UAAME,aAAa,GAAGD,OAAO,CAACL,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,QAArC,CAA8CI,KAApE;AAAA,UAA2EC,QAAQ,GAAGV,SAAS,CAACE,aAAV,CAAwBS,KAAxB,CAA8BC,QAApH;;AACA,UAAI,CAACF,QAAL,EAAe;AACX;AACH;;AACD,UAAMG,YAAY,GAAG;AACjBC,QAAAA,CAAC,EAAEd,SAAS,CAACe,MAAV,CAAiBC,IAAjB,CAAsBC,KAAtB,GAA8B,CADhB;AAEjBC,QAAAA,CAAC,EAAElB,SAAS,CAACe,MAAV,CAAiBC,IAAjB,CAAsBG,MAAtB,GAA+B;AAFjB,OAArB;AAAA,UAGGC,cAAc,GAAGb,OAAO,CAACL,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,QAArC,CAA8CgB,MAHlE;AAAA,UAG0EC,MAAM,GAAGxB,QAAQ,CAACyB,SAAT,KAAuBf,aAH1G;AAAA,UAGyHgB,cAAc,GAAG;AACtIV,QAAAA,CAAC,EAAE,CAACJ,QAAQ,CAACI,CAAT,GAAaD,YAAY,CAACC,CAA3B,IAAgCQ,MADmG;AAEtIJ,QAAAA,CAAC,EAAE,CAACR,QAAQ,CAACQ,CAAT,GAAaL,YAAY,CAACK,CAA3B,IAAgCI;AAFmG,OAH1I;AAOAxB,MAAAA,QAAQ,CAAC2B,MAAT,CAAgBX,CAAhB,IAAqB,CAACU,cAAc,CAACV,CAAf,GAAmBhB,QAAQ,CAAC2B,MAAT,CAAgBX,CAApC,IAAyCM,cAA9D;AACAtB,MAAAA,QAAQ,CAAC2B,MAAT,CAAgBP,CAAhB,IAAqB,CAACM,cAAc,CAACN,CAAf,GAAmBpB,QAAQ,CAAC2B,MAAT,CAAgBP,CAApC,IAAyCE,cAA9D;AACH;AA1BL;;AAAA;AAAA","sourcesContent":["import { isSsr } from \"../../Utils/Utils\";\nexport class ParallaxMover {\n    init() {\n    }\n    isEnabled(particle) {\n        return (!isSsr() &&\n            !particle.destroyed &&\n            particle.container.actualOptions.interactivity.events.onHover.parallax.enable);\n    }\n    move(particle) {\n        const container = particle.container, options = container.actualOptions;\n        if (isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const parallaxForce = options.interactivity.events.onHover.parallax.force, mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        }, parallaxSmooth = options.interactivity.events.onHover.parallax.smooth, factor = particle.getRadius() / parallaxForce, centerDistance = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (centerDistance.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (centerDistance.y - particle.offset.y) / parallaxSmooth;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}