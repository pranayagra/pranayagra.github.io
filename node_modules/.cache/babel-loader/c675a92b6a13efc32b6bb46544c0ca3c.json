{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _createForOfIteratorHelper from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { getLinkColor, getLinkRandomColor } from \"../../../Utils/ColorUtils\";\nimport { Constants } from \"../../../Core/Utils/Constants\";\nimport { ExternalInteractorBase } from \"../../../Core/Utils/ExternalInteractorBase\";\nimport { getDistance } from \"../../../Utils/NumberUtils\";\nimport { isInArray } from \"../../../Utils/Utils\";\nexport var Grabber = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Grabber, _ExternalInteractorBa);\n\n  var _super = _createSuper(Grabber);\n\n  function Grabber(container) {\n    _classCallCheck(this, Grabber);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Grabber, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n      return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _a, container, options, interactivity, mousePos, distance, query, _iterator, _step, particle, pos, pointDistance, grabLineOptions, lineOpacity, opacityLine, optColor, linksOptions, colorLine;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n\n                if (!(!interactivity.events.onHover.enable || container.interactivity.status !== Constants.mouseMoveEvent)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                mousePos = container.interactivity.mouse.position;\n\n                if (mousePos) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 6:\n                distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n                _iterator = _createForOfIteratorHelper(query);\n                _context.prev = 8;\n\n                _iterator.s();\n\n              case 10:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 26;\n                  break;\n                }\n\n                particle = _step.value;\n                pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n\n                if (!(pointDistance > distance)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 24);\n\n              case 15:\n                grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n                if (!(opacityLine <= 0)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 24);\n\n              case 18:\n                optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n\n                if (!container.particles.grabLineColor) {\n                  linksOptions = options.interactivity.modes.grab.links;\n                  container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                }\n\n                colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n\n                if (colorLine) {\n                  _context.next = 23;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 23:\n                container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n\n              case 24:\n                _context.next = 10;\n                break;\n\n              case 26:\n                _context.next = 31;\n                break;\n\n              case 28:\n                _context.prev = 28;\n                _context.t0 = _context[\"catch\"](8);\n\n                _iterator.e(_context.t0);\n\n              case 31:\n                _context.prev = 31;\n\n                _iterator.f();\n\n                return _context.finish(31);\n\n              case 34:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[8, 28, 31, 34]]);\n      }));\n\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }]);\n\n  return Grabber;\n}(ExternalInteractorBase);","map":{"version":3,"sources":["C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/tsparticles/esm/Interactions/External/Grab/Grabber.js"],"names":["getLinkColor","getLinkRandomColor","Constants","ExternalInteractorBase","getDistance","isInArray","Grabber","container","mouse","interactivity","events","actualOptions","onHover","enable","position","mode","options","status","mouseMoveEvent","mousePos","distance","retina","grabModeDistance","query","particles","quadTree","queryCircle","particle","pos","getPosition","pointDistance","grabLineOptions","modes","grab","links","lineOpacity","opacity","opacityLine","optColor","_a","color","grabLineColor","linksOptions","blink","consent","colorLine","undefined","canvas","drawGrabLine"],"mappings":"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","sourcesContent":["import { getLinkColor, getLinkRandomColor } from \"../../../Utils/ColorUtils\";\nimport { Constants } from \"../../../Core/Utils/Constants\";\nimport { ExternalInteractorBase } from \"../../../Core/Utils/ExternalInteractorBase\";\nimport { getDistance } from \"../../../Utils/NumberUtils\";\nimport { isInArray } from \"../../../Utils/Utils\";\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, mouse = container.interactivity.mouse, events = container.actualOptions.interactivity.events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n    reset() {\n    }\n    async interact() {\n        var _a;\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.events.onHover.enable || container.interactivity.status !== Constants.mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= 0) {\n                continue;\n            }\n            const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n            if (!container.particles.grabLineColor) {\n                const linksOptions = options.interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                return;\n            }\n            container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}