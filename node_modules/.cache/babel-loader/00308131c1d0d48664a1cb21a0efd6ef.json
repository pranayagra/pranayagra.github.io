{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { clear as _clear, drawConnectLine as _drawConnectLine, drawGrabLine as _drawGrabLine, drawParticle as _drawParticle, drawParticlePlugin as _drawParticlePlugin, drawPlugin as _drawPlugin, gradient, paintBase as _paintBase } from \"../Utils/CanvasUtils\";\nimport { colorToHsl, colorToRgb, getStyleFromHsl, getStyleFromRgb } from \"../Utils/ColorUtils\";\nimport { Constants } from \"./Utils/Constants\";\nimport { deepExtend } from \"../Utils/Utils\";\nexport var Canvas = /*#__PURE__*/function () {\n  function Canvas(container) {\n    _classCallCheck(this, Canvas);\n\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  _createClass(Canvas, [{\n    key: \"init\",\n    value: function init() {\n      this.resize();\n      this.initStyle();\n      this.initCover();\n      this.initTrail();\n      this.initBackground();\n      this.paint();\n    }\n  }, {\n    key: \"loadCanvas\",\n    value: function loadCanvas(canvas) {\n      var _a;\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      this.generatedCanvas = canvas.dataset && Constants.generatedAttribute in canvas.dataset ? canvas.dataset[Constants.generatedAttribute] === \"true\" : this.generatedCanvas;\n      this.element = canvas;\n      this.originalStyle = deepExtend({}, this.element.style);\n      this.size.height = canvas.offsetHeight;\n      this.size.width = canvas.offsetWidth;\n      this.context = this.element.getContext(\"2d\");\n      this.container.retina.init();\n      this.initBackground();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this = this;\n\n      var _a;\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      this.draw(function (ctx) {\n        _clear(ctx, _this.size);\n      });\n    }\n  }, {\n    key: \"paint\",\n    value: function paint() {\n      var _this2 = this;\n\n      var options = this.container.actualOptions;\n      this.draw(function (ctx) {\n        if (options.backgroundMask.enable && options.backgroundMask.cover) {\n          _clear(ctx, _this2.size);\n\n          _this2.paintBase(_this2.coverColorStyle);\n        } else {\n          _this2.paintBase();\n        }\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this3 = this;\n\n      var options = this.container.actualOptions,\n          trail = options.particles.move.trail;\n\n      if (options.backgroundMask.enable) {\n        this.paint();\n      } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n        this.paintBase(getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n      } else {\n        this.draw(function (ctx) {\n          _clear(ctx, _this3.size);\n        });\n      }\n    }\n  }, {\n    key: \"windowResize\",\n    value: function () {\n      var _windowResize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var container, needsRefresh, _iterator, _step, _step$value, plugin;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.element) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                this.resize();\n                container = this.container, needsRefresh = container.updateActualOptions();\n                container.particles.setDensity();\n                _iterator = _createForOfIteratorHelper(container.plugins);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _step$value = _slicedToArray(_step.value, 2), plugin = _step$value[1];\n\n                    if (plugin.resize !== undefined) {\n                      plugin.resize();\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                if (!needsRefresh) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 10;\n                return container.refresh();\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function windowResize() {\n        return _windowResize.apply(this, arguments);\n      }\n\n      return windowResize;\n    }()\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (!this.element) {\n        return;\n      }\n\n      var container = this.container,\n          pxRatio = container.retina.pixelRatio,\n          size = container.canvas.size,\n          newSize = {\n        width: this.element.offsetWidth * pxRatio,\n        height: this.element.offsetHeight * pxRatio\n      };\n\n      if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n        return;\n      }\n\n      var oldSize = Object.assign({}, size);\n      this.element.width = size.width = this.element.offsetWidth * pxRatio;\n      this.element.height = size.height = this.element.offsetHeight * pxRatio;\n\n      if (this.container.started) {\n        this.resizeFactor = {\n          width: size.width / oldSize.width,\n          height: size.height / oldSize.height\n        };\n      }\n    }\n  }, {\n    key: \"drawConnectLine\",\n    value: function drawConnectLine(p1, p2) {\n      var _this4 = this;\n\n      this.draw(function (ctx) {\n        var _a;\n\n        var lineStyle = _this4.lineStyle(p1, p2);\n\n        if (!lineStyle) {\n          return;\n        }\n\n        var pos1 = p1.getPosition(),\n            pos2 = p2.getPosition();\n\n        _drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : _this4.container.retina.linksWidth, lineStyle, pos1, pos2);\n      });\n    }\n  }, {\n    key: \"drawGrabLine\",\n    value: function drawGrabLine(particle, lineColor, opacity, mousePos) {\n      var container = this.container;\n      this.draw(function (ctx) {\n        var _a;\n\n        var beginPos = particle.getPosition();\n\n        _drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n      });\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(particle, delta) {\n      var _this5 = this;\n\n      var _a, _b, _c, _d, _e, _f;\n\n      if (particle.spawning || particle.destroyed) {\n        return;\n      }\n\n      var radius = particle.getRadius();\n\n      if (radius <= 0) {\n        return;\n      }\n\n      var pfColor = particle.getFillColor(),\n          psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n\n      if (!pfColor && !psColor) {\n        return;\n      }\n\n      var _this$getPluginPartic = this.getPluginParticleColors(particle),\n          _this$getPluginPartic2 = _slicedToArray(_this$getPluginPartic, 2),\n          fColor = _this$getPluginPartic2[0],\n          sColor = _this$getPluginPartic2[1];\n\n      if (!fColor || !sColor) {\n        if (!fColor) {\n          fColor = pfColor ? pfColor : undefined;\n        }\n\n        if (!sColor) {\n          sColor = psColor ? psColor : undefined;\n        }\n      }\n\n      var options = this.container.actualOptions,\n          zIndexOptions = particle.options.zIndex,\n          zOpacityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.opacityRate),\n          opacity = (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1,\n          strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity,\n          zOpacity = opacity * zOpacityFactor,\n          zStrokeOpacity = strokeOpacity * zOpacityFactor;\n      var colorStyles = {\n        fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n      };\n      colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n      this.draw(function (ctx) {\n        var zSizeFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.sizeRate),\n            container = _this5.container;\n\n        var _iterator2 = _createForOfIteratorHelper(container.particles.updaters),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var updater = _step2.value;\n\n            if (updater.beforeDraw) {\n              updater.beforeDraw(particle);\n            }\n\n            if (updater.getColorStyles) {\n              var _updater$getColorStyl = updater.getColorStyles(particle, ctx, radius, zOpacity),\n                  fill = _updater$getColorStyl.fill,\n                  stroke = _updater$getColorStyl.stroke;\n\n              if (fill) {\n                colorStyles.fill = fill;\n              }\n\n              if (stroke) {\n                colorStyles.stroke = stroke;\n              }\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        _drawParticle(container, ctx, particle, delta, colorStyles, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow);\n\n        var _iterator3 = _createForOfIteratorHelper(container.particles.updaters),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _updater = _step3.value;\n\n            if (_updater.afterDraw) {\n              _updater.afterDraw(particle);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      });\n    }\n  }, {\n    key: \"drawPlugin\",\n    value: function drawPlugin(plugin, delta) {\n      this.draw(function (ctx) {\n        _drawPlugin(ctx, plugin, delta);\n      });\n    }\n  }, {\n    key: \"drawParticlePlugin\",\n    value: function drawParticlePlugin(plugin, particle, delta) {\n      this.draw(function (ctx) {\n        _drawParticlePlugin(ctx, plugin, particle, delta);\n      });\n    }\n  }, {\n    key: \"initBackground\",\n    value: function initBackground() {\n      var options = this.container.actualOptions,\n          background = options.background,\n          element = this.element,\n          elementStyle = element === null || element === void 0 ? void 0 : element.style;\n\n      if (!elementStyle) {\n        return;\n      }\n\n      if (background.color) {\n        var color = colorToRgb(background.color);\n        elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n      } else {\n        elementStyle.backgroundColor = \"\";\n      }\n\n      elementStyle.backgroundImage = background.image || \"\";\n      elementStyle.backgroundPosition = background.position || \"\";\n      elementStyle.backgroundRepeat = background.repeat || \"\";\n      elementStyle.backgroundSize = background.size || \"\";\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(cb) {\n      if (!this.context) {\n        return;\n      }\n\n      return cb(this.context);\n    }\n  }, {\n    key: \"initCover\",\n    value: function initCover() {\n      var options = this.container.actualOptions,\n          cover = options.backgroundMask.cover,\n          color = cover.color,\n          coverRgb = colorToRgb(color);\n\n      if (coverRgb) {\n        var coverColor = {\n          r: coverRgb.r,\n          g: coverRgb.g,\n          b: coverRgb.b,\n          a: cover.opacity\n        };\n        this.coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n      }\n    }\n  }, {\n    key: \"initTrail\",\n    value: function initTrail() {\n      var options = this.container.actualOptions,\n          trail = options.particles.move.trail,\n          fillColor = colorToRgb(trail.fillColor);\n\n      if (fillColor) {\n        var _trail = options.particles.move.trail;\n        this.trailFillColor = {\n          r: fillColor.r,\n          g: fillColor.g,\n          b: fillColor.b,\n          a: 1 / _trail.length\n        };\n      }\n    }\n  }, {\n    key: \"getPluginParticleColors\",\n    value: function getPluginParticleColors(particle) {\n      var fColor, sColor;\n\n      var _iterator4 = _createForOfIteratorHelper(this.container.plugins),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n              plugin = _step4$value[1];\n\n          if (!fColor && plugin.particleFillColor) {\n            fColor = colorToHsl(plugin.particleFillColor(particle));\n          }\n\n          if (!sColor && plugin.particleStrokeColor) {\n            sColor = colorToHsl(plugin.particleStrokeColor(particle));\n          }\n\n          if (fColor && sColor) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return [fColor, sColor];\n    }\n  }, {\n    key: \"initStyle\",\n    value: function initStyle() {\n      var element = this.element,\n          options = this.container.actualOptions;\n\n      if (!element) {\n        return;\n      }\n\n      var originalStyle = this.originalStyle;\n\n      if (options.fullScreen.enable) {\n        this.originalStyle = deepExtend({}, element.style);\n        element.style.setProperty(\"position\", \"fixed\", \"important\");\n        element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n        element.style.setProperty(\"top\", \"0\", \"important\");\n        element.style.setProperty(\"left\", \"0\", \"important\");\n        element.style.setProperty(\"width\", \"100%\", \"important\");\n        element.style.setProperty(\"height\", \"100%\", \"important\");\n      } else if (originalStyle) {\n        element.style.position = originalStyle.position;\n        element.style.zIndex = originalStyle.zIndex;\n        element.style.top = originalStyle.top;\n        element.style.left = originalStyle.left;\n        element.style.width = originalStyle.width;\n        element.style.height = originalStyle.height;\n      }\n\n      for (var key in options.style) {\n        if (!key || !options.style) {\n          continue;\n        }\n\n        var value = options.style[key];\n\n        if (!value) {\n          continue;\n        }\n\n        element.style.setProperty(key, value, \"important\");\n      }\n    }\n  }, {\n    key: \"paintBase\",\n    value: function paintBase(baseColor) {\n      var _this6 = this;\n\n      this.draw(function (ctx) {\n        _paintBase(ctx, _this6.size, baseColor);\n      });\n    }\n  }, {\n    key: \"lineStyle\",\n    value: function lineStyle(p1, p2) {\n      var _this7 = this;\n\n      return this.draw(function (ctx) {\n        var options = _this7.container.actualOptions,\n            connectOptions = options.interactivity.modes.connect;\n        return gradient(ctx, p1, p2, connectOptions.links.opacity);\n      });\n    }\n  }]);\n\n  return Canvas;\n}();","map":{"version":3,"sources":["C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/tsparticles/esm/Core/Canvas.js"],"names":["clear","drawConnectLine","drawGrabLine","drawParticle","drawParticlePlugin","drawPlugin","gradient","paintBase","colorToHsl","colorToRgb","getStyleFromHsl","getStyleFromRgb","Constants","deepExtend","Canvas","container","size","height","width","context","generatedCanvas","resize","initStyle","initCover","initTrail","initBackground","paint","canvas","_a","element","remove","dataset","generatedAttribute","originalStyle","style","offsetHeight","offsetWidth","getContext","retina","init","draw","ctx","options","actualOptions","backgroundMask","enable","cover","coverColorStyle","trail","particles","move","length","trailFillColor","needsRefresh","updateActualOptions","setDensity","plugins","plugin","undefined","refresh","pxRatio","pixelRatio","newSize","oldSize","Object","assign","started","resizeFactor","p1","p2","lineStyle","pos1","getPosition","pos2","linksWidth","particle","lineColor","opacity","mousePos","beginPos","delta","_b","_c","_d","_e","_f","spawning","destroyed","radius","getRadius","pfColor","getFillColor","psColor","getStrokeColor","getPluginParticleColors","fColor","sColor","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","bubble","value","strokeOpacity","stroke","zOpacity","zStrokeOpacity","colorStyles","fill","zSizeFactor","sizeRate","updaters","updater","beforeDraw","getColorStyles","composite","shadow","afterDraw","background","elementStyle","color","backgroundColor","backgroundImage","image","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","cb","coverRgb","coverColor","r","g","b","a","fillColor","particleFillColor","particleStrokeColor","fullScreen","setProperty","toString","top","left","key","baseColor","connectOptions","interactivity","modes","connect","links"],"mappings":"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","sourcesContent":["import { clear, drawConnectLine, drawGrabLine, drawParticle, drawParticlePlugin, drawPlugin, gradient, paintBase, } from \"../Utils/CanvasUtils\";\nimport { colorToHsl, colorToRgb, getStyleFromHsl, getStyleFromRgb } from \"../Utils/ColorUtils\";\nimport { Constants } from \"./Utils/Constants\";\nimport { deepExtend } from \"../Utils/Utils\";\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this.context = null;\n        this.generatedCanvas = false;\n    }\n    init() {\n        this.resize();\n        this.initStyle();\n        this.initCover();\n        this.initTrail();\n        this.initBackground();\n        this.paint();\n    }\n    loadCanvas(canvas) {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.generatedCanvas =\n            canvas.dataset && Constants.generatedAttribute in canvas.dataset\n                ? canvas.dataset[Constants.generatedAttribute] === \"true\"\n                : this.generatedCanvas;\n        this.element = canvas;\n        this.originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this.context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    destroy() {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.draw((ctx) => {\n            clear(ctx, this.size);\n        });\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                this.paintBase(this.coverColorStyle);\n            }\n            else {\n                this.paintBase();\n            }\n        });\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n            this.paintBase(getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        this.resize();\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.resize !== undefined) {\n                plugin.resize();\n            }\n        }\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return;\n        }\n        const oldSize = Object.assign({}, size);\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    drawConnectLine(p1, p2) {\n        this.draw((ctx) => {\n            var _a;\n            const lineStyle = this.lineStyle(p1, p2);\n            if (!lineStyle) {\n                return;\n            }\n            const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n        });\n    }\n    drawGrabLine(particle, lineColor, opacity, mousePos) {\n        const container = this.container;\n        this.draw((ctx) => {\n            var _a;\n            const beginPos = particle.getPosition();\n            drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n        });\n    }\n    drawParticle(particle, delta) {\n        var _a, _b, _c, _d, _e, _f;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= 0) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        if (!pfColor && !psColor) {\n            return;\n        }\n        let [fColor, sColor] = this.getPluginParticleColors(particle);\n        if (!fColor || !sColor) {\n            if (!fColor) {\n                fColor = pfColor ? pfColor : undefined;\n            }\n            if (!sColor) {\n                sColor = psColor ? psColor : undefined;\n            }\n        }\n        const options = this.container.actualOptions, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, opacity = (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1, strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor;\n        const colorStyles = {\n            fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n        };\n        colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n        this.draw((ctx) => {\n            const zSizeFactor = (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate, container = this.container;\n            for (const updater of container.particles.updaters) {\n                if (updater.beforeDraw) {\n                    updater.beforeDraw(particle);\n                }\n                if (updater.getColorStyles) {\n                    const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                    if (fill) {\n                        colorStyles.fill = fill;\n                    }\n                    if (stroke) {\n                        colorStyles.stroke = stroke;\n                    }\n                }\n            }\n            drawParticle(container, ctx, particle, delta, colorStyles, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow);\n            for (const updater of container.particles.updaters) {\n                if (updater.afterDraw) {\n                    updater.afterDraw(particle);\n                }\n            }\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            drawPlugin(ctx, plugin, delta);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            drawParticlePlugin(ctx, plugin, particle, delta);\n        });\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element, elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = colorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    draw(cb) {\n        if (!this.context) {\n            return;\n        }\n        return cb(this.context);\n    }\n    initCover() {\n        const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color, coverRgb = colorToRgb(color);\n        if (coverRgb) {\n            const coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n            this.coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n        }\n    }\n    initTrail() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, fillColor = colorToRgb(trail.fillColor);\n        if (fillColor) {\n            const trail = options.particles.move.trail;\n            this.trailFillColor = {\n                r: fillColor.r,\n                g: fillColor.g,\n                b: fillColor.b,\n                a: 1 / trail.length,\n            };\n        }\n    }\n    getPluginParticleColors(particle) {\n        let fColor, sColor;\n        for (const [, plugin] of this.container.plugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = colorToHsl(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = colorToHsl(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        const originalStyle = this.originalStyle;\n        if (options.fullScreen.enable) {\n            this.originalStyle = deepExtend({}, element.style);\n            element.style.setProperty(\"position\", \"fixed\", \"important\");\n            element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n            element.style.setProperty(\"top\", \"0\", \"important\");\n            element.style.setProperty(\"left\", \"0\", \"important\");\n            element.style.setProperty(\"width\", \"100%\", \"important\");\n            element.style.setProperty(\"height\", \"100%\", \"important\");\n        }\n        else if (originalStyle) {\n            element.style.position = originalStyle.position;\n            element.style.zIndex = originalStyle.zIndex;\n            element.style.top = originalStyle.top;\n            element.style.left = originalStyle.left;\n            element.style.width = originalStyle.width;\n            element.style.height = originalStyle.height;\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    paintBase(baseColor) {\n        this.draw((ctx) => {\n            paintBase(ctx, this.size, baseColor);\n        });\n    }\n    lineStyle(p1, p2) {\n        return this.draw((ctx) => {\n            const options = this.container.actualOptions, connectOptions = options.interactivity.modes.connect;\n            return gradient(ctx, p1, p2, connectOptions.links.opacity);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}