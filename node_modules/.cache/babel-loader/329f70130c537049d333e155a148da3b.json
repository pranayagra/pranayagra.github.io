{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name max\r\n * @category Common Helpers\r\n * @summary Return the latest of the given dates.\r\n *\r\n * @description\r\n * Return the latest of the given dates.\r\n *\r\n * @param {Date[]|Number[]} datesArray - the dates to compare\r\n * @returns {Date} the latest of the dates\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Which of these dates is the latest?\r\n * const result = max([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Sun Jul 02 1995 00:00:00\r\n */\n\nexport default function max(dirtyDatesArray) {\n  requiredArgs(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (_typeof(dirtyDatesArray) === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","map":{"version":3,"sources":["C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/date-fns/esm/max/index.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","toDate","requiredArgs","max","dirtyDatesArray","arguments","datesArray","forEach","Array","slice","call","Date","NaN","result","dirtyDate","currentDate","undefined","isNaN","Number"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE1X,OAAOK,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,GAAT,CAAaC,eAAb,EAA8B;AAC3CF,EAAAA,YAAY,CAAC,CAAD,EAAIG,SAAJ,CAAZ;AACA,MAAIC,UAAJ,CAF2C,CAE3B;;AAEhB,MAAIF,eAAe,IAAI,OAAOA,eAAe,CAACG,OAAvB,KAAmC,UAA1D,EAAsE;AACpED,IAAAA,UAAU,GAAGF,eAAb,CADoE,CACtC;AAC/B,GAFD,MAEO,IAAIT,OAAO,CAACS,eAAD,CAAP,KAA6B,QAA7B,IAAyCA,eAAe,KAAK,IAAjE,EAAuE;AAC5EE,IAAAA,UAAU,GAAGE,KAAK,CAACR,SAAN,CAAgBS,KAAhB,CAAsBC,IAAtB,CAA2BN,eAA3B,CAAb;AACD,GAFM,MAEA;AACL;AACA,WAAO,IAAIO,IAAJ,CAASC,GAAT,CAAP;AACD;;AAED,MAAIC,MAAJ;AACAP,EAAAA,UAAU,CAACC,OAAX,CAAmB,UAAUO,SAAV,EAAqB;AACtC,QAAIC,WAAW,GAAGd,MAAM,CAACa,SAAD,CAAxB;;AAEA,QAAID,MAAM,KAAKG,SAAX,IAAwBH,MAAM,GAAGE,WAAjC,IAAgDE,KAAK,CAACC,MAAM,CAACH,WAAD,CAAP,CAAzD,EAAgF;AAC9EF,MAAAA,MAAM,GAAGE,WAAT;AACD;AACF,GAND;AAOA,SAAOF,MAAM,IAAI,IAAIF,IAAJ,CAASC,GAAT,CAAjB;AACD","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nimport toDate from \"../toDate/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name max\r\n * @category Common Helpers\r\n * @summary Return the latest of the given dates.\r\n *\r\n * @description\r\n * Return the latest of the given dates.\r\n *\r\n * @param {Date[]|Number[]} datesArray - the dates to compare\r\n * @returns {Date} the latest of the dates\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Which of these dates is the latest?\r\n * const result = max([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Sun Jul 02 1995 00:00:00\r\n */\r\n\r\nexport default function max(dirtyDatesArray) {\r\n  requiredArgs(1, arguments);\r\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\r\n\r\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\r\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\r\n  } else if (_typeof(dirtyDatesArray) === 'object' && dirtyDatesArray !== null) {\r\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\r\n  } else {\r\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\r\n    return new Date(NaN);\r\n  }\r\n\r\n  var result;\r\n  datesArray.forEach(function (dirtyDate) {\r\n    var currentDate = toDate(dirtyDate);\r\n\r\n    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {\r\n      result = currentDate;\r\n    }\r\n  });\r\n  return result || new Date(NaN);\r\n}"]},"metadata":{},"sourceType":"module"}