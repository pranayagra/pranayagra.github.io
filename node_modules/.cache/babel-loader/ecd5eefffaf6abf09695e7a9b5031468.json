{"ast":null,"code":"import { clamp, getDistance, getDistances } from \"../../Utils/NumberUtils\";\nimport { isInArray } from \"../../Utils/Utils\";\nexport function applyDistance(particle) {\n  var initialPosition = particle.initialPosition;\n\n  var _getDistances = getDistances(initialPosition, particle.position),\n      dx = _getDistances.dx,\n      dy = _getDistances.dy;\n\n  var dxFixed = Math.abs(dx),\n      dyFixed = Math.abs(dy);\n  var hDistance = particle.retina.maxDistance.horizontal;\n  var vDistance = particle.retina.maxDistance.vertical;\n\n  if (!hDistance && !vDistance) {\n    return;\n  }\n\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    var pos = particle.position,\n        vel = particle.velocity;\n\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -Math.random();\n    }\n\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -Math.random();\n    }\n  }\n}\nexport function spin(particle, moveSpeed) {\n  var container = particle.container;\n\n  if (!particle.spin) {\n    return;\n  }\n\n  var updateFunc = {\n    x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n    y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos\n  };\n  particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n  particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n  particle.spin.radius += particle.spin.acceleration;\n  var maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n\n  if (particle.spin.radius > maxCanvasSize / 2) {\n    particle.spin.radius = maxCanvasSize / 2;\n    particle.spin.acceleration *= -1;\n  } else if (particle.spin.radius < 0) {\n    particle.spin.radius = 0;\n    particle.spin.acceleration *= -1;\n  }\n\n  particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n  var particlesOptions = particle.options;\n  var pathOptions = particlesOptions.move.path;\n  var pathEnabled = pathOptions.enable;\n\n  if (!pathEnabled) {\n    return;\n  }\n\n  var container = particle.container;\n\n  if (particle.lastPathTime <= particle.pathDelay) {\n    particle.lastPathTime += delta.value;\n    return;\n  }\n\n  var path = container.pathGenerator.generate(particle);\n  particle.velocity.addTo(path);\n\n  if (pathOptions.clamp) {\n    particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n    particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n  }\n\n  particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n  var container = particle.container;\n  var options = container.actualOptions;\n  var active = isInArray(\"slow\", options.interactivity.events.onHover.mode);\n\n  if (!active) {\n    return 1;\n  }\n\n  var mousePos = particle.container.interactivity.mouse.position;\n\n  if (!mousePos) {\n    return 1;\n  }\n\n  var particlePos = particle.getPosition();\n  var dist = getDistance(mousePos, particlePos);\n  var radius = container.retina.slowModeRadius;\n\n  if (dist > radius) {\n    return 1;\n  }\n\n  var proximityFactor = dist / radius || 0;\n  var slowFactor = options.interactivity.modes.slow.factor;\n  return proximityFactor / slowFactor;\n}","map":{"version":3,"sources":["C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/tsparticles/esm/Movers/Base/Utils.js"],"names":["clamp","getDistance","getDistances","isInArray","applyDistance","particle","initialPosition","position","dx","dy","dxFixed","Math","abs","dyFixed","hDistance","retina","maxDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","random","spin","moveSpeed","container","updateFunc","direction","cos","sin","center","radius","angle","acceleration","maxCanvasSize","max","canvas","size","width","height","applyPath","delta","particlesOptions","options","pathOptions","move","path","pathEnabled","enable","lastPathTime","pathDelay","value","pathGenerator","generate","addTo","getProximitySpeedFactor","actualOptions","active","interactivity","events","onHover","mode","mousePos","mouse","particlePos","getPosition","dist","slowModeRadius","proximityFactor","slowFactor","modes","slow","factor"],"mappings":"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","sourcesContent":["import { clamp, getDistance, getDistances } from \"../../Utils/NumberUtils\";\nimport { isInArray } from \"../../Utils/Utils\";\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition;\n    const { dx, dy } = getDistances(initialPosition, particle.position);\n    const dxFixed = Math.abs(dx), dyFixed = Math.abs(dy);\n    const hDistance = particle.retina.maxDistance.horizontal;\n    const vDistance = particle.retina.maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -Math.random();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -Math.random();\n        }\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n    if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n    }\n    else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n    }\n    particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    const particlesOptions = particle.options;\n    const pathOptions = particlesOptions.move.path;\n    const pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    const container = particle.container;\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = container.pathGenerator.generate(particle);\n    particle.velocity.addTo(path);\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    const container = particle.container;\n    const options = container.actualOptions;\n    const active = isInArray(\"slow\", options.interactivity.events.onHover.mode);\n    if (!active) {\n        return 1;\n    }\n    const mousePos = particle.container.interactivity.mouse.position;\n    if (!mousePos) {\n        return 1;\n    }\n    const particlePos = particle.getPosition();\n    const dist = getDistance(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n    if (dist > radius) {\n        return 1;\n    }\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n}\n"]},"metadata":{},"sourceType":"module"}