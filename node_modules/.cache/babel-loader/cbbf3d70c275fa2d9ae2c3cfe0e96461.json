{"ast":null,"code":"import _classCallCheck from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getRangeValue } from \"../../Utils/NumberUtils\";\nfunction updateAngle(particle, delta) {\n  var _a;\n  var rotate = particle.rotate;\n  if (!rotate) {\n    return;\n  }\n  var rotateOptions = particle.options.rotate;\n  var rotateAnimation = rotateOptions.animation;\n  var speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n  var max = 2 * Math.PI;\n  if (!rotateAnimation.enable) {\n    return;\n  }\n  switch (rotate.status) {\n    case 0:\n      rotate.value += speed;\n      if (rotate.value > max) {\n        rotate.value -= max;\n      }\n      break;\n    case 1:\n    default:\n      rotate.value -= speed;\n      if (rotate.value < 0) {\n        rotate.value += max;\n      }\n      break;\n  }\n}\nexport var AngleUpdater = /*#__PURE__*/function () {\n  function AngleUpdater(container) {\n    _classCallCheck(this, AngleUpdater);\n    this.container = container;\n  }\n  _createClass(AngleUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var rotateOptions = particle.options.rotate;\n      particle.rotate = {\n        enable: rotateOptions.animation.enable,\n        value: getRangeValue(rotateOptions.value) * Math.PI / 180\n      };\n      var rotateDirection = rotateOptions.direction;\n      if (rotateDirection === \"random\") {\n        var index = Math.floor(Math.random() * 2);\n        rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n      }\n      switch (rotateDirection) {\n        case \"counter-clockwise\":\n        case \"counterClockwise\":\n          particle.rotate.status = 1;\n          break;\n        case \"clockwise\":\n          particle.rotate.status = 0;\n          break;\n      }\n      var rotateAnimation = particle.options.rotate.animation;\n      if (rotateAnimation.enable) {\n        particle.rotate.velocity = getRangeValue(rotateAnimation.speed) / 360 * this.container.retina.reduceFactor;\n        if (!rotateAnimation.sync) {\n          particle.rotate.velocity *= Math.random();\n        }\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var rotate = particle.options.rotate;\n      var rotateAnimation = rotate.animation;\n      return !particle.destroyed && !particle.spawning && !rotate.path && rotateAnimation.enable;\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n      updateAngle(particle, delta);\n    }\n  }]);\n  return AngleUpdater;\n}();","map":{"version":3,"names":["getRangeValue","updateAngle","particle","delta","_a","rotate","rotateOptions","options","rotateAnimation","animation","speed","velocity","factor","max","Math","PI","enable","status","value","AngleUpdater","container","_classCallCheck","_createClass","key","init","rotateDirection","direction","index","floor","random","retina","reduceFactor","sync","isEnabled","destroyed","spawning","path","update"],"sources":["C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/tsparticles/esm/Updaters/Angle/AngleUpdater.js"],"sourcesContent":["import { getRangeValue } from \"../../Utils/NumberUtils\";\nfunction updateAngle(particle, delta) {\n    var _a;\n    const rotate = particle.rotate;\n    if (!rotate) {\n        return;\n    }\n    const rotateOptions = particle.options.rotate;\n    const rotateAnimation = rotateOptions.animation;\n    const speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const max = 2 * Math.PI;\n    if (!rotateAnimation.enable) {\n        return;\n    }\n    switch (rotate.status) {\n        case 0:\n            rotate.value += speed;\n            if (rotate.value > max) {\n                rotate.value -= max;\n            }\n            break;\n        case 1:\n        default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n                rotate.value += max;\n            }\n            break;\n    }\n}\nexport class AngleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = 1;\n                break;\n            case \"clockwise\":\n                particle.rotate.status = 0;\n                break;\n        }\n        const rotateAnimation = particle.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= Math.random();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        const rotateAnimation = rotate.animation;\n        return !particle.destroyed && !particle.spawning && !rotate.path && rotateAnimation.enable;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateAngle(particle, delta);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}