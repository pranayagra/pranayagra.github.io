{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CircleShape = void 0;\n\nvar CircleShape = /*#__PURE__*/function () {\n  function CircleShape() {\n    _classCallCheck(this, CircleShape);\n  }\n\n  _createClass(CircleShape, [{\n    key: \"randomPosition\",\n    value: function randomPosition(position, offset, fill) {\n      var generateTheta = function generateTheta(x, y) {\n        var u = Math.random() / 4.0;\n        var theta = Math.atan(y / x * Math.tan(2 * Math.PI * u));\n        var v = Math.random();\n\n        if (v < 0.25) {\n          return theta;\n        } else if (v < 0.5) {\n          return Math.PI - theta;\n        } else if (v < 0.75) {\n          return Math.PI + theta;\n        } else {\n          return -theta;\n        }\n      };\n\n      var radius = function radius(x, y, theta) {\n        return x * y / Math.sqrt(Math.pow(y * Math.cos(theta), 2) + Math.pow(x * Math.sin(theta), 2));\n      };\n\n      var a = offset.x / 2,\n          b = offset.y / 2;\n      var randomTheta = generateTheta(a, b),\n          maxRadius = radius(a, b, randomTheta),\n          randomRadius = fill ? maxRadius * Math.sqrt(Math.random()) : maxRadius;\n      return {\n        x: position.x + randomRadius * Math.cos(randomTheta),\n        y: position.y + randomRadius * Math.sin(randomTheta)\n      };\n    }\n  }]);\n\n  return CircleShape;\n}();\n\nexports.CircleShape = CircleShape;","map":{"version":3,"sources":["C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/tsparticles/Plugins/Emitters/Shapes/Circle/CircleShape.js"],"names":["Object","defineProperty","exports","value","CircleShape","position","offset","fill","generateTheta","x","y","u","Math","random","theta","atan","tan","PI","v","radius","sqrt","cos","sin","a","b","randomTheta","maxRadius","randomRadius"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;IACMA,W;;;;;;;WACF,wBAAeC,QAAf,EAAyBC,MAAzB,EAAiCC,IAAjC,EAAuC;AACnC,UAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,CAAD,EAAIC,CAAJ,EAAU;AAC5B,YAAMC,CAAC,GAAGC,IAAI,CAACC,MAAL,KAAgB,GAA1B;AACA,YAAMC,KAAK,GAAGF,IAAI,CAACG,IAAL,CAAWL,CAAC,GAAGD,CAAL,GAAUG,IAAI,CAACI,GAAL,CAAS,IAAIJ,IAAI,CAACK,EAAT,GAAcN,CAAvB,CAApB,CAAd;AACA,YAAMO,CAAC,GAAGN,IAAI,CAACC,MAAL,EAAV;;AACA,YAAIK,CAAC,GAAG,IAAR,EAAc;AACV,iBAAOJ,KAAP;AACH,SAFD,MAGK,IAAII,CAAC,GAAG,GAAR,EAAa;AACd,iBAAON,IAAI,CAACK,EAAL,GAAUH,KAAjB;AACH,SAFI,MAGA,IAAII,CAAC,GAAG,IAAR,EAAc;AACf,iBAAON,IAAI,CAACK,EAAL,GAAUH,KAAjB;AACH,SAFI,MAGA;AACD,iBAAO,CAACA,KAAR;AACH;AACJ,OAhBD;;AAiBA,UAAMK,MAAM,GAAG,SAATA,MAAS,CAACV,CAAD,EAAIC,CAAJ,EAAOI,KAAP;AAAA,eAAkBL,CAAC,GAAGC,CAAL,GAAUE,IAAI,CAACQ,IAAL,CAAU,SAACV,CAAC,GAAGE,IAAI,CAACS,GAAL,CAASP,KAAT,CAAL,EAAyB,CAAzB,aAA8BL,CAAC,GAAGG,IAAI,CAACU,GAAL,CAASR,KAAT,CAAlC,EAAsD,CAAtD,CAAV,CAA3B;AAAA,OAAf;;AACA,UAAOS,CAAP,GAAgBjB,MAAM,CAACG,CAAP,GAAW,CAA3B;AAAA,UAAUe,CAAV,GAA8BlB,MAAM,CAACI,CAAP,GAAW,CAAzC;AACA,UAAMe,WAAW,GAAGjB,aAAa,CAACe,CAAD,EAAIC,CAAJ,CAAjC;AAAA,UAAyCE,SAAS,GAAGP,MAAM,CAACI,CAAD,EAAIC,CAAJ,EAAOC,WAAP,CAA3D;AAAA,UAAgFE,YAAY,GAAGpB,IAAI,GAAGmB,SAAS,GAAGd,IAAI,CAACQ,IAAL,CAAUR,IAAI,CAACC,MAAL,EAAV,CAAf,GAA0Ca,SAA7I;AACA,aAAO;AACHjB,QAAAA,CAAC,EAAEJ,QAAQ,CAACI,CAAT,GAAakB,YAAY,GAAGf,IAAI,CAACS,GAAL,CAASI,WAAT,CAD5B;AAEHf,QAAAA,CAAC,EAAEL,QAAQ,CAACK,CAAT,GAAaiB,YAAY,GAAGf,IAAI,CAACU,GAAL,CAASG,WAAT;AAF5B,OAAP;AAIH;;;;;;AAELvB,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CircleShape = void 0;\r\nclass CircleShape {\r\n    randomPosition(position, offset, fill) {\r\n        const generateTheta = (x, y) => {\r\n            const u = Math.random() / 4.0;\r\n            const theta = Math.atan((y / x) * Math.tan(2 * Math.PI * u));\r\n            const v = Math.random();\r\n            if (v < 0.25) {\r\n                return theta;\r\n            }\r\n            else if (v < 0.5) {\r\n                return Math.PI - theta;\r\n            }\r\n            else if (v < 0.75) {\r\n                return Math.PI + theta;\r\n            }\r\n            else {\r\n                return -theta;\r\n            }\r\n        };\r\n        const radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** 2 + (x * Math.sin(theta)) ** 2);\r\n        const [a, b] = [offset.x / 2, offset.y / 2];\r\n        const randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(Math.random()) : maxRadius;\r\n        return {\r\n            x: position.x + randomRadius * Math.cos(randomTheta),\r\n            y: position.y + randomRadius * Math.sin(randomTheta),\r\n        };\r\n    }\r\n}\r\nexports.CircleShape = CircleShape;\r\n"]},"metadata":{},"sourceType":"script"}