{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { clamp, getDistance, getRangeMax } from \"../../../Utils/NumberUtils\";\nimport { colorMix, colorToHsl, rgbToHsl } from \"../../../Utils/ColorUtils\";\nimport { divMode, divModeExecute, isDivModeEnabled, isInArray, itemFromArray } from \"../../../Utils/Utils\";\nimport { Circle } from \"../../../Core/Utils/Circle\";\nimport { Constants } from \"../../../Core/Utils/Constants\";\nimport { ExternalInteractorBase } from \"../../../Core/Utils/ExternalInteractorBase\";\nimport { Rectangle } from \"../../../Core/Utils/Rectangle\";\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    var value = particleValue + (modeValue - optionsValue) * ratio;\n    return clamp(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    var _value = particleValue - (optionsValue - modeValue) * ratio;\n\n    return clamp(_value, modeValue, particleValue);\n  }\n}\n\nexport var Bubbler = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Bubbler, _ExternalInteractorBa);\n\n  var _super = _createSuper(Bubbler);\n\n  function Bubbler(container) {\n    var _this;\n\n    _classCallCheck(this, Bubbler);\n\n    _this = _super.call(this, container);\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    _this.handleClickMode = function (mode) {\n      if (mode !== \"bubble\") {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      container.bubble.clicking = true;\n    };\n\n    return _this;\n  }\n\n  _createClass(Bubbler, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events,\n          divs = events.onDiv,\n          divBubble = isDivModeEnabled(\"bubble\", divs);\n\n      if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      var clickMode = events.onClick.mode;\n      return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(particle, force) {\n      if (!(!particle.bubble.inRange || force)) {\n        return;\n      }\n\n      delete particle.bubble.div;\n      delete particle.bubble.opacity;\n      delete particle.bubble.radius;\n      delete particle.bubble.color;\n    }\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var options, events, onHover, onClick, hoverEnabled, hoverMode, clickEnabled, clickMode, divs;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n\n                if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n                  this.hoverBubble();\n                } else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n                  this.clickBubble();\n                } else {\n                  divModeExecute(\"bubble\", divs, function (selector, div) {\n                    return _this2.singleSelectorHover(selector, div);\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }, {\n    key: \"singleSelectorHover\",\n    value: function singleSelectorHover(selector, div) {\n      var _this3 = this;\n\n      var container = this.container,\n          selectors = document.querySelectorAll(selector);\n\n      if (!selectors.length) {\n        return;\n      }\n\n      selectors.forEach(function (item) {\n        var elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n          x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n          y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n        },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === \"circle\" ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            query = container.particles.quadTree.query(area);\n\n        var _iterator = _createForOfIteratorHelper(query),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var particle = _step.value;\n\n            if (!area.contains(particle.getPosition())) {\n              continue;\n            }\n\n            particle.bubble.inRange = true;\n            var divs = container.actualOptions.interactivity.modes.bubble.divs;\n            var divBubble = divMode(divs, elem);\n\n            if (!particle.bubble.div || particle.bubble.div !== elem) {\n              _this3.reset(particle, true);\n\n              particle.bubble.div = elem;\n            }\n\n            _this3.hoverBubbleSize(particle, 1, divBubble);\n\n            _this3.hoverBubbleOpacity(particle, 1, divBubble);\n\n            _this3.hoverBubbleColor(particle, 1, divBubble);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n    }\n  }, {\n    key: \"process\",\n    value: function process(particle, distMouse, timeSpent, data) {\n      var container = this.container,\n          bubbleParam = data.bubbleObj.optValue;\n\n      if (bubbleParam === undefined) {\n        return;\n      }\n\n      var options = container.actualOptions,\n          bubbleDuration = options.interactivity.modes.bubble.duration,\n          bubbleDistance = container.retina.bubbleModeDistance,\n          particlesParam = data.particlesObj.optValue,\n          pObjBubble = data.bubbleObj.value,\n          pObj = data.particlesObj.value || 0,\n          type = data.type;\n\n      if (bubbleParam === particlesParam) {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= bubbleDistance) {\n          var obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n          if (obj !== bubbleParam) {\n            var value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n            if (type === \"size\") {\n              particle.bubble.radius = value;\n            }\n\n            if (type === \"opacity\") {\n              particle.bubble.opacity = value;\n            }\n          }\n        } else {\n          if (type === \"size\") {\n            delete particle.bubble.radius;\n          }\n\n          if (type === \"opacity\") {\n            delete particle.bubble.opacity;\n          }\n        }\n      } else if (pObjBubble) {\n        if (type === \"size\") {\n          delete particle.bubble.radius;\n        }\n\n        if (type === \"opacity\") {\n          delete particle.bubble.opacity;\n        }\n      }\n    }\n  }, {\n    key: \"clickBubble\",\n    value: function clickBubble() {\n      var _a, _b;\n\n      var container = this.container,\n          options = container.actualOptions,\n          mouseClickPos = container.interactivity.mouse.clickPosition;\n\n      if (!mouseClickPos) {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      var distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n\n      var _iterator2 = _createForOfIteratorHelper(query),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var particle = _step2.value;\n\n          if (!container.bubble.clicking) {\n            continue;\n          }\n\n          particle.bubble.inRange = !container.bubble.durationEnd;\n          var pos = particle.getPosition(),\n              distMouse = getDistance(pos, mouseClickPos),\n              timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n          if (timeSpent > options.interactivity.modes.bubble.duration) {\n            container.bubble.durationEnd = true;\n          }\n\n          if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n            container.bubble.clicking = false;\n            container.bubble.durationEnd = false;\n          }\n\n          var sizeData = {\n            bubbleObj: {\n              optValue: container.retina.bubbleModeSize,\n              value: particle.bubble.radius\n            },\n            particlesObj: {\n              optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n              value: particle.size.value\n            },\n            type: \"size\"\n          };\n          this.process(particle, distMouse, timeSpent, sizeData);\n          var opacityData = {\n            bubbleObj: {\n              optValue: options.interactivity.modes.bubble.opacity,\n              value: particle.bubble.opacity\n            },\n            particlesObj: {\n              optValue: getRangeMax(particle.options.opacity.value),\n              value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n            },\n            type: \"opacity\"\n          };\n          this.process(particle, distMouse, timeSpent, opacityData);\n\n          if (!container.bubble.durationEnd) {\n            if (distMouse <= container.retina.bubbleModeDistance) {\n              this.hoverBubbleColor(particle, distMouse);\n            } else {\n              delete particle.bubble.color;\n            }\n          } else {\n            delete particle.bubble.color;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"hoverBubble\",\n    value: function hoverBubble() {\n      var container = this.container,\n          mousePos = container.interactivity.mouse.position;\n\n      if (mousePos === undefined) {\n        return;\n      }\n\n      var distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n      var _iterator3 = _createForOfIteratorHelper(query),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var particle = _step3.value;\n          particle.bubble.inRange = true;\n          var pos = particle.getPosition(),\n              pointDistance = getDistance(pos, mousePos),\n              ratio = 1 - pointDistance / distance;\n\n          if (pointDistance <= distance) {\n            if (ratio >= 0 && container.interactivity.status === Constants.mouseMoveEvent) {\n              this.hoverBubbleSize(particle, ratio);\n              this.hoverBubbleOpacity(particle, ratio);\n              this.hoverBubbleColor(particle, ratio);\n            }\n          } else {\n            this.reset(particle);\n          }\n\n          if (container.interactivity.status === Constants.mouseLeaveEvent) {\n            this.reset(particle);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"hoverBubbleSize\",\n    value: function hoverBubbleSize(particle, ratio, divBubble) {\n      var container = this.container,\n          modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n      if (modeSize === undefined) {\n        return;\n      }\n\n      var optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n      var pSize = particle.size.value;\n      var size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n      if (size !== undefined) {\n        particle.bubble.radius = size;\n      }\n    }\n  }, {\n    key: \"hoverBubbleOpacity\",\n    value: function hoverBubbleOpacity(particle, ratio, divBubble) {\n      var _a, _b, _c;\n\n      var container = this.container,\n          options = container.actualOptions,\n          modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n      if (!modeOpacity) {\n        return;\n      }\n\n      var optOpacity = particle.options.opacity.value;\n      var pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n      var opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n\n      if (opacity !== undefined) {\n        particle.bubble.opacity = opacity;\n      }\n    }\n  }, {\n    key: \"hoverBubbleColor\",\n    value: function hoverBubbleColor(particle, ratio, divBubble) {\n      var options = this.container.actualOptions;\n      var bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n\n      if (!particle.bubble.finalColor) {\n        var modeColor = bubbleOptions.color;\n\n        if (!modeColor) {\n          return;\n        }\n\n        var bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n        particle.bubble.finalColor = colorToHsl(bubbleColor);\n      }\n\n      if (!particle.bubble.finalColor) {\n        return;\n      }\n\n      if (bubbleOptions.mix) {\n        particle.bubble.color = undefined;\n        var pColor = particle.getFillColor();\n        particle.bubble.color = pColor ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n      } else {\n        particle.bubble.color = particle.bubble.finalColor;\n      }\n    }\n  }]);\n\n  return Bubbler;\n}(ExternalInteractorBase);","map":{"version":3,"sources":["C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/tsparticles/esm/Interactions/External/Bubble/Bubbler.js"],"names":["clamp","getDistance","getRangeMax","colorMix","colorToHsl","rgbToHsl","divMode","divModeExecute","isDivModeEnabled","isInArray","itemFromArray","Circle","Constants","ExternalInteractorBase","Rectangle","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","value","Bubbler","container","bubble","handleClickMode","mode","clicking","options","actualOptions","mouse","interactivity","events","divs","onDiv","divBubble","onHover","enable","position","onClick","clickPosition","hoverMode","clickMode","particle","force","inRange","div","opacity","radius","color","hoverEnabled","clickEnabled","hoverBubble","clickBubble","selector","singleSelectorHover","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","retina","pixelRatio","pos","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","type","query","particles","quadTree","contains","getPosition","modes","reset","hoverBubbleSize","hoverBubbleOpacity","hoverBubbleColor","distMouse","timeSpent","data","bubbleParam","bubbleObj","optValue","undefined","bubbleDuration","duration","bubbleDistance","bubbleModeDistance","particlesParam","particlesObj","pObjBubble","pObj","durationEnd","obj","_a","_b","mouseClickPos","distance","queryCircle","Date","getTime","clickTime","sizeData","bubbleModeSize","size","process","opacityData","mousePos","pointDistance","status","mouseMoveEvent","mouseLeaveEvent","modeSize","optSize","pSize","_c","modeOpacity","optOpacity","pOpacity","bubbleOptions","finalColor","modeColor","bubbleColor","Array","mix","pColor","getFillColor"],"mappings":"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","sourcesContent":["import { clamp, getDistance, getRangeMax } from \"../../../Utils/NumberUtils\";\nimport { colorMix, colorToHsl, rgbToHsl } from \"../../../Utils/ColorUtils\";\nimport { divMode, divModeExecute, isDivModeEnabled, isInArray, itemFromArray } from \"../../../Utils/Utils\";\nimport { Circle } from \"../../../Core/Utils/Circle\";\nimport { Constants } from \"../../../Core/Utils/Constants\";\nimport { ExternalInteractorBase } from \"../../../Core/Utils/ExternalInteractorBase\";\nimport { Rectangle } from \"../../../Core/Utils/Rectangle\";\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    isEnabled() {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events, divs = events.onDiv, divBubble = isDivModeEnabled(\"bubble\", divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n    reset(particle, force) {\n        if (!(!particle.bubble.inRange || force)) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    async interact() {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, repulseRadius)\n                : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area);\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = divMode(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.reset(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions, bubbleDuration = options.interactivity.modes.bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === \"size\") {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === \"opacity\") {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === \"size\") {\n                    delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === \"size\") {\n                delete particle.bubble.radius;\n            }\n            if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    clickBubble() {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (!mouseClickPos) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: \"size\",\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: \"opacity\",\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container, mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === Constants.mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === Constants.mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n            particle.bubble.finalColor = colorToHsl(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}