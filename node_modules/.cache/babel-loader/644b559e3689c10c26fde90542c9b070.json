{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { colorToRgb, getStyleFromRgb } from \"../../Utils/ColorUtils\";\nimport { Vector } from \"../../Core/Utils/Vector\";\nimport { getDistances } from \"../../Utils/NumberUtils\";\nexport function drawPolygonMask(context, rawData, stroke) {\n  var color = colorToRgb(stroke.color);\n\n  if (!color) {\n    return;\n  }\n\n  context.beginPath();\n  context.moveTo(rawData[0].x, rawData[0].y);\n\n  var _iterator = _createForOfIteratorHelper(rawData),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      context.lineTo(item.x, item.y);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  context.closePath();\n  context.strokeStyle = getStyleFromRgb(color);\n  context.lineWidth = stroke.width;\n  context.stroke();\n}\nexport function drawPolygonMaskPath(context, path, stroke, position) {\n  context.translate(position.x, position.y);\n  var color = colorToRgb(stroke.color);\n\n  if (!color) {\n    return;\n  }\n\n  context.strokeStyle = getStyleFromRgb(color, stroke.opacity);\n  context.lineWidth = stroke.width;\n  context.stroke(path);\n}\nexport function parsePaths(paths, scale, offset) {\n  var _a;\n\n  var res = [];\n\n  var _iterator2 = _createForOfIteratorHelper(paths),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var path = _step2.value;\n      var segments = path.element.pathSegList,\n          len = (_a = segments === null || segments === void 0 ? void 0 : segments.numberOfItems) !== null && _a !== void 0 ? _a : 0,\n          p = {\n        x: 0,\n        y: 0\n      };\n\n      for (var i = 0; i < len; i++) {\n        var segment = segments === null || segments === void 0 ? void 0 : segments.getItem(i);\n        var svgPathSeg = window.SVGPathSeg;\n\n        switch (segment === null || segment === void 0 ? void 0 : segment.pathSegType) {\n          case svgPathSeg.PATHSEG_MOVETO_ABS:\n          case svgPathSeg.PATHSEG_LINETO_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n          case svgPathSeg.PATHSEG_ARC_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n            {\n              var absSeg = segment;\n              p.x = absSeg.x;\n              p.y = absSeg.y;\n              break;\n            }\n\n          case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n            p.x = segment.x;\n            break;\n\n          case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n            p.y = segment.y;\n            break;\n\n          case svgPathSeg.PATHSEG_LINETO_REL:\n          case svgPathSeg.PATHSEG_MOVETO_REL:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n          case svgPathSeg.PATHSEG_ARC_REL:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n            {\n              var relSeg = segment;\n              p.x += relSeg.x;\n              p.y += relSeg.y;\n              break;\n            }\n\n          case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n            p.x += segment.x;\n            break;\n\n          case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n            p.y += segment.y;\n            break;\n\n          case svgPathSeg.PATHSEG_UNKNOWN:\n          case svgPathSeg.PATHSEG_CLOSEPATH:\n            continue;\n        }\n\n        res.push({\n          x: p.x * scale + offset.x,\n          y: p.y * scale + offset.y\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return res;\n}\nexport function calcClosestPtOnSegment(s1, s2, pos) {\n  var _getDistances = getDistances(pos, s1),\n      dx = _getDistances.dx,\n      dy = _getDistances.dy,\n      _getDistances2 = getDistances(s2, s1),\n      dxx = _getDistances2.dx,\n      dyy = _getDistances2.dy,\n      t = (dx * dxx + dy * dyy) / (Math.pow(dxx, 2) + Math.pow(dyy, 2)),\n      res = {\n    x: s1.x + dxx * t,\n    y: s1.x + dyy * t,\n    isOnSegment: t >= 0 && t <= 1\n  };\n\n  if (t < 0) {\n    res.x = s1.x;\n    res.y = s1.y;\n  } else if (t > 1) {\n    res.x = s2.x;\n    res.y = s2.y;\n  }\n\n  return res;\n}\nexport function segmentBounce(start, stop, velocity) {\n  var _getDistances3 = getDistances(start, stop),\n      dx = _getDistances3.dx,\n      dy = _getDistances3.dy,\n      wallAngle = Math.atan2(dy, dx),\n      wallNormal = Vector.create(Math.sin(wallAngle), -Math.cos(wallAngle)),\n      d = 2 * (velocity.x * wallNormal.x + velocity.y * wallNormal.y);\n\n  wallNormal.multTo(d);\n  velocity.subFrom(wallNormal);\n}","map":{"version":3,"sources":["C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/tsparticles/esm/Plugins/PolygonMask/Utils.js"],"names":["colorToRgb","getStyleFromRgb","Vector","getDistances","drawPolygonMask","context","rawData","stroke","color","beginPath","moveTo","x","y","item","lineTo","closePath","strokeStyle","lineWidth","width","drawPolygonMaskPath","path","position","translate","opacity","parsePaths","paths","scale","offset","_a","res","segments","element","pathSegList","len","numberOfItems","p","i","segment","getItem","svgPathSeg","window","SVGPathSeg","pathSegType","PATHSEG_MOVETO_ABS","PATHSEG_LINETO_ABS","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_ARC_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS","absSeg","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_REL","PATHSEG_MOVETO_REL","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_REL","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL","relSeg","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","PATHSEG_UNKNOWN","PATHSEG_CLOSEPATH","push","calcClosestPtOnSegment","s1","s2","pos","dx","dy","dxx","dyy","t","isOnSegment","segmentBounce","start","stop","velocity","wallAngle","Math","atan2","wallNormal","create","sin","cos","d","multTo","subFrom"],"mappings":"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","sourcesContent":["import { colorToRgb, getStyleFromRgb } from \"../../Utils/ColorUtils\";\nimport { Vector } from \"../../Core/Utils/Vector\";\nimport { getDistances } from \"../../Utils/NumberUtils\";\nexport function drawPolygonMask(context, rawData, stroke) {\n    const color = colorToRgb(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.beginPath();\n    context.moveTo(rawData[0].x, rawData[0].y);\n    for (const item of rawData) {\n        context.lineTo(item.x, item.y);\n    }\n    context.closePath();\n    context.strokeStyle = getStyleFromRgb(color);\n    context.lineWidth = stroke.width;\n    context.stroke();\n}\nexport function drawPolygonMaskPath(context, path, stroke, position) {\n    context.translate(position.x, position.y);\n    const color = colorToRgb(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.strokeStyle = getStyleFromRgb(color, stroke.opacity);\n    context.lineWidth = stroke.width;\n    context.stroke(path);\n}\nexport function parsePaths(paths, scale, offset) {\n    var _a;\n    const res = [];\n    for (const path of paths) {\n        const segments = path.element.pathSegList, len = (_a = segments === null || segments === void 0 ? void 0 : segments.numberOfItems) !== null && _a !== void 0 ? _a : 0, p = {\n            x: 0,\n            y: 0,\n        };\n        for (let i = 0; i < len; i++) {\n            const segment = segments === null || segments === void 0 ? void 0 : segments.getItem(i);\n            const svgPathSeg = window.SVGPathSeg;\n            switch (segment === null || segment === void 0 ? void 0 : segment.pathSegType) {\n                case svgPathSeg.PATHSEG_MOVETO_ABS:\n                case svgPathSeg.PATHSEG_LINETO_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                case svgPathSeg.PATHSEG_ARC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: {\n                    const absSeg = segment;\n                    p.x = absSeg.x;\n                    p.y = absSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                    p.x = segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                    p.y = segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_REL:\n                case svgPathSeg.PATHSEG_MOVETO_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                case svgPathSeg.PATHSEG_ARC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: {\n                    const relSeg = segment;\n                    p.x += relSeg.x;\n                    p.y += relSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                    p.x += segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                    p.y += segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_UNKNOWN:\n                case svgPathSeg.PATHSEG_CLOSEPATH:\n                    continue;\n            }\n            res.push({\n                x: p.x * scale + offset.x,\n                y: p.y * scale + offset.y,\n            });\n        }\n    }\n    return res;\n}\nexport function calcClosestPtOnSegment(s1, s2, pos) {\n    const { dx, dy } = getDistances(pos, s1), { dx: dxx, dy: dyy } = getDistances(s2, s1), t = (dx * dxx + dy * dyy) / (dxx ** 2 + dyy ** 2), res = {\n        x: s1.x + dxx * t,\n        y: s1.x + dyy * t,\n        isOnSegment: t >= 0 && t <= 1,\n    };\n    if (t < 0) {\n        res.x = s1.x;\n        res.y = s1.y;\n    }\n    else if (t > 1) {\n        res.x = s2.x;\n        res.y = s2.y;\n    }\n    return res;\n}\nexport function segmentBounce(start, stop, velocity) {\n    const { dx, dy } = getDistances(start, stop), wallAngle = Math.atan2(dy, dx), wallNormal = Vector.create(Math.sin(wallAngle), -Math.cos(wallAngle)), d = 2 * (velocity.x * wallNormal.x + velocity.y * wallNormal.y);\n    wallNormal.multTo(d);\n    velocity.subFrom(wallNormal);\n}\n"]},"metadata":{},"sourceType":"module"}