{"ast":null,"code":"import _classCallCheck from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { colorToHsl, getStyleFromHsl } from \"../../Utils/ColorUtils\";\nimport { getRangeValue } from \"../../Utils/NumberUtils\";\nexport var TwinkleUpdater = /*#__PURE__*/function () {\n  function TwinkleUpdater() {\n    _classCallCheck(this, TwinkleUpdater);\n  }\n\n  _createClass(TwinkleUpdater, [{\n    key: \"getColorStyles\",\n    value: function getColorStyles(particle, context, radius, opacity) {\n      var pOptions = particle.options,\n          twinkle = pOptions.twinkle.particles,\n          twinkling = twinkle.enable && Math.random() < twinkle.frequency,\n          zIndexOptions = particle.options.zIndex,\n          zOpacityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.opacityRate),\n          twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity,\n          twinkleRgb = colorToHsl(twinkle.color),\n          twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined,\n          res = {},\n          needsTwinkle = twinkling && twinkleStyle;\n      res.fill = needsTwinkle ? twinkleStyle : undefined;\n      res.stroke = needsTwinkle ? twinkleStyle : undefined;\n      return res;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return particle.options.twinkle.particles.enable;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {}\n  }]);\n\n  return TwinkleUpdater;\n}();","map":{"version":3,"sources":["C:/Users/prana/OneDrive/Desktop/Misc/officialwebsite/node_modules/tsparticles/esm/Updaters/Twinkle/TwinkleUpdater.js"],"names":["colorToHsl","getStyleFromHsl","getRangeValue","TwinkleUpdater","particle","context","radius","opacity","pOptions","options","twinkle","particles","twinkling","enable","Math","random","frequency","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","twinklingOpacity","twinkleRgb","color","twinkleStyle","undefined","res","needsTwinkle","fill","stroke"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,eAArB,QAA4C,wBAA5C;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,WAAaC,cAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WACI,wBAAeC,QAAf,EAAyBC,OAAzB,EAAkCC,MAAlC,EAA0CC,OAA1C,EAAmD;AAC/C,UAAMC,QAAQ,GAAGJ,QAAQ,CAACK,OAA1B;AAAA,UAAmCC,OAAO,GAAGF,QAAQ,CAACE,OAAT,CAAiBC,SAA9D;AAAA,UAAyEC,SAAS,GAAGF,OAAO,CAACG,MAAR,IAAkBC,IAAI,CAACC,MAAL,KAAgBL,OAAO,CAACM,SAA/H;AAAA,UAA0IC,aAAa,GAAGb,QAAQ,CAACK,OAAT,CAAiBS,MAA3K;AAAA,UAAmLC,cAAc,YAAI,IAAIf,QAAQ,CAACgB,YAAjB,EAAkCH,aAAa,CAACI,WAAhD,CAAjM;AAAA,UAA8PC,gBAAgB,GAAGV,SAAS,GAAGV,aAAa,CAACQ,OAAO,CAACH,OAAT,CAAb,GAAiCY,cAApC,GAAqDZ,OAA/U;AAAA,UAAwVgB,UAAU,GAAGvB,UAAU,CAACU,OAAO,CAACc,KAAT,CAA/W;AAAA,UAAgYC,YAAY,GAAGF,UAAU,GAAGtB,eAAe,CAACsB,UAAD,EAAaD,gBAAb,CAAlB,GAAmDI,SAA5c;AAAA,UAAudC,GAAG,GAAG,EAA7d;AAAA,UAAieC,YAAY,GAAGhB,SAAS,IAAIa,YAA7f;AACAE,MAAAA,GAAG,CAACE,IAAJ,GAAWD,YAAY,GAAGH,YAAH,GAAkBC,SAAzC;AACAC,MAAAA,GAAG,CAACG,MAAJ,GAAaF,YAAY,GAAGH,YAAH,GAAkBC,SAA3C;AACA,aAAOC,GAAP;AACH;AANL;AAAA;AAAA,WAOI,gBAAO,CACN;AARL;AAAA;AAAA,WASI,mBAAUvB,QAAV,EAAoB;AAChB,aAAOA,QAAQ,CAACK,OAAT,CAAiBC,OAAjB,CAAyBC,SAAzB,CAAmCE,MAA1C;AACH;AAXL;AAAA;AAAA,WAYI,kBAAS,CACR;AAbL;;AAAA;AAAA","sourcesContent":["import { colorToHsl, getStyleFromHsl } from \"../../Utils/ColorUtils\";\nimport { getRangeValue } from \"../../Utils/NumberUtils\";\nexport class TwinkleUpdater {\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkle = pOptions.twinkle.particles, twinkling = twinkle.enable && Math.random() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = colorToHsl(twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        return particle.options.twinkle.particles.enable;\n    }\n    update() {\n    }\n}\n"]},"metadata":{},"sourceType":"module"}